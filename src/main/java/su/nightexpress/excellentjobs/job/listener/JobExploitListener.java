package su.nightexpress.excellentjobs.job.listener;

import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.BlockFertilizeEvent;
import org.bukkit.event.block.BlockFormEvent;
import org.bukkit.event.entity.CreatureSpawnEvent;
import org.bukkit.event.entity.EntityTransformEvent;
import org.jetbrains.annotations.NotNull;
import su.nightexpress.excellentjobs.JobsPlugin;
import su.nightexpress.excellentjobs.config.Config;
import su.nightexpress.excellentjobs.job.JobManager;
import su.nightexpress.nightcore.manager.AbstractListener;
import su.nightexpress.nightcore.util.blocktracker.PlayerBlockTracker;

public class JobExploitListener extends AbstractListener<JobsPlugin> {

    public JobExploitListener(@NotNull JobsPlugin plugin) {
        super(plugin);
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onGlitchEntitySpawn(CreatureSpawnEvent e) {
        if (Config.ABUSE_IGNORE_SPAWN_REASONS.get().contains(e.getSpawnReason())) {
            JobManager.devastateEntity(e.getEntity());
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onGlitchEntityTransform(EntityTransformEvent e) {
        if (JobManager.isDevastated(e.getEntity())) {
            e.getTransformedEntities().forEach(JobManager::devastateEntity);
            JobManager.devastateEntity(e.getTransformedEntity());
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onGlitchBlockFertilize(BlockFertilizeEvent e) {
        if (Config.ABUSE_IGNORE_FERTILIZED.get().contains(e.getBlock().getType())) {
            PlayerBlockTracker.trackForce(e.getBlock());
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onGlitchBlockGeneration(BlockFormEvent e) {
        if (Config.ABUSE_IGNORE_BLOCK_GENERATION.get().contains(e.getNewState().getType())) {
            plugin.getServer().getScheduler().runTask(plugin, () -> {
                PlayerBlockTracker.trackForce(e.getBlock());
            });
        }
    }
}
